# SPDX-License-Identifier: AGPL-3.0-or-later
# © 2025 Ryo ∴ SpiralArchitect (kishkavsesvit@icloud.com)
# Part of SpiralTorch — Licensed under AGPL-3.0-or-later.
# Unauthorized derivative works or closed redistribution prohibited under AGPL §13.

import json, sys
def emit(entries):
    print("// generated by gen_wgpu_heuristics_rs.py")
    print("pub fn choose(rows: usize, cols: usize, k: usize, subgroup: bool) -> Option<super::Choice> {")
    for e in entries:
        r0,r1 = e["rows"]; c0,c1 = e["cols"]; k0,k1 = e["k"]; sg = "true" if e["subgroup"] else "false"
        ch = e["choice"]
        print(f"  if (rows>={r0} && rows<={r1}) && (cols>={c0} && cols<={c1}) && (k>={k0} && k<={k1}) && subgroup=={sg} "+"{")
        print("    return Some(super::Choice{")
        print(f"      use_2ce: {str(ch.get('use_2ce','false')).lower()}, wg: {ch.get('wg',128)}, kl: {ch.get('kl',8)}, ch: {ch.get('ch',0)},")
        print(f"      algo_topk: {ch.get('algo_topk',0)}, ctile: {ch.get('ctile',0)}, mode_midk: {ch.get('mode_midk',0)}, mode_bottomk: {ch.get('mode_bottomk',0)},")
        print("    });")
        print("  }")
    print("  None")
    print("}")
def main():
    data = json.load(sys.stdin if len(sys.argv)==1 else open(sys.argv[1]))
    emit(data["entries"])
if __name__=='__main__': main()
