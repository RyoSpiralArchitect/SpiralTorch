#!/usr/bin/env python3
# Emit wgpu_heuristics_generated.rs from a JSON table with fields:
# rows, cols, k, use_2ce, wg, kl, ch, mk, tile, mkd, ctile, two_ce_hint

import json, sys

def main():
    js = json.load(sys.stdin)
    entries = js["entries"]  # list of dicts
    print("// Auto-generated by tools/tuner/gen_generated_rs.py")
    print("#[derive(Debug, Clone, Copy)]")
    print("pub struct Choice {")
    print("    pub use_2ce: bool, pub wg:u32, pub kl:u32, pub ch:u32,")
    print("    pub mk:u32, pub tile:u32,")
    print("    pub mkd: Option<u32>, pub ctile: Option<u32>,")
    print("    pub two_ce_hint: bool,")
    print("}")
    print("pub(super) fn choose_generated(rows:usize, cols:usize, k:usize, _subgroup:bool) -> Option<Choice> {")
    print("    let mut best: Option<Choice> = None;")
    print("    // naive nearest-match by (rows, log2(cols), k bin)")
    print("    let l2c = (cols as f64).log2().floor() as i32;")
    print("    let kbin = if k<=128 {128} else if k<=1024 {1024} else if k<=4096 {4096} else {8192};")
    print("    match (l2c, kbin) {")
    buckets = {}
    for e in entries:
        l2c = int((e["cols"]).bit_length()-1)
        kbin = 128 if e["k"]<=128 else 1024 if e["k"]<=1024 else 4096 if e["k"]<=4096 else 8192
        buckets.setdefault((l2c,kbin), []).append(e)
    for (l2c,kbin), lst in sorted(buckets.items()):
        print(f"        ({l2c}, {kbin}) => {{")
        # choose first; in practice you can do better (nearest rows/cols)
        e = lst[0]
        def b(x): return "true" if x else "false"
        print("            best = Some(Choice{")
        print(f"                use_2ce:{b(e['use_2ce'])}, wg:{e['wg']}, kl:{e['kl']}, ch:{e['ch']},")
        print(f"                mk:{e['mk']}, tile:{e['tile']},")
        mkd = "Some({})".format(e["mkd"]) if e.get("mkd") is not None else "None"
        ct  = "Some({})".format(e["ctile"]) if e.get("ctile") is not None else "None"
        print(f"                mkd:{mkd}, ctile:{ct}, two_ce_hint:{b(e.get('two_ce_hint', False))},")
        print("            });")
        print("        }")
    print("        _ => {}")
    print("    }")
    print("    best")
    print("}")
if __name__ == '__main__': main()
