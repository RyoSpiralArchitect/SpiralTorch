
#[cfg(feature="kdsl")]
use st_kdsl as kd;
use crate::backend::wgpu_heuristics::Choice as _Ignore;

#[derive(Debug, Clone, Copy)]
pub struct MidKChoice { pub scan_wg: u32, pub tile_cols: u32, pub two_ce: bool }

fn fallback(cols:u32, k:u32)->MidKChoice{
    MidKChoice{
        scan_wg: if cols>16384 {256} else {128},
        tile_cols: if cols>65536 {4096} else {2048},
        two_ce: k>512 || cols>32768,
    }
}

fn from_spiralk(rows:u32, cols:u32, k:u32, subgroup:bool) -> Option<MidKChoice> {
    #[cfg(feature="kdsl")]
    if let Ok(src) = std::env::var("SPIRAL_HEUR_MIDK"){
        if !src.trim().is_empty(){
            let ctx = kd::Ctx{ r:rows, c:cols, k, sg:subgroup };
            if let Ok(out) = kd::eval_program(&src, &ctx){
                let mut c = fallback(cols, k);
                if let Some(w) = out.hard.wg { c.scan_wg = if w==128 || w==256 { w } else { c.scan_wg }; }
                if let Some(ch) = out.hard.ch { c.tile_cols = if ch>0 { ch } else { c.tile_cols }; }
                if let Some(u2) = out.hard.use_2ce { c.two_ce = u2; }
                return Some(c);
            }
        }
    }
    None
}

fn from_kv(rows:u32, cols:u32, k:u32, subgroup:bool) -> Option<MidKChoice> {
    #[cfg(feature="kv-redis")]
    {
        let url = std::env::var("REDIS_URL").ok()?;
        let lg2c = (32 - (cols.max(1)-1).leading_zeros()) as u32;
        let lg2k = (32 - (k.max(1)-1).leading_zeros()) as u32;
        let key = format!("spiral:midk:v1:sg:{}:c:{}:k:{}", if subgroup{1}else{0}, lg2c, lg2k);
        if let Ok(Some(v)) = st_kv::redis_get_midk(&url, &key) {
            return Some(MidKChoice{ scan_wg:v.scan_wg, tile_cols:v.tile_cols, two_ce:v.two_ce });
        }
    }
    None
}

pub fn choose_midk(rows:u32, cols:u32, k:u32, subgroup:bool)->MidKChoice{
    if let Some(c) = from_spiralk(rows, cols, k, subgroup) { return c; }
    if let Some(c) = choose_generated_midk(rows, cols, k, subgroup) { return c; }
    if let Some(c) = from_kv(rows, cols, k, subgroup) { return c; }
    fallback(cols, k)
}

// Generated by tools (stub)
include!("generated/midk_heuristics_generated.rs");
